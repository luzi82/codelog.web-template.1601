service: codelog-webtemplate-1601

frameworkVersion: ">=2.4.0 <3.0.0"

provider:
  name: aws
  runtime: python3.7
  environment:
    STAGE: ${opt:stage}

functions:
  endpoint:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

resources:
  Resources:
    PublicStaticBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN}
    PublicStaticCloudfrontOAI:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: ${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN}
    PublicStaticBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: PublicStaticBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ''
                  - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity '
                    - Ref: PublicStaticCloudfrontOAI
              Action:
              - s3:GetObject
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: PublicStaticBucket
                    - /*
    PublicStaticCloudfront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
          - DomainName: ${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN}.s3.amazonaws.com # TODO
            Id: S3-${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN}
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                  - ''
                  - - 'origin-access-identity/cloudfront/'
                    - Ref: PublicStaticCloudfrontOAI
          Enabled: 'true'
          DefaultRootObject: index.html
          Aliases:
          - ${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN}
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            TargetOriginId: S3-${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN}
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: allow-all
          HttpVersion: http2
          IPV6Enabled: true
          PriceClass: PriceClass_200 # PriceClass_100 / PriceClass_200 / PriceClass_All
          ViewerCertificate:
            AcmCertificateArn: ${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN_ACM_CERTIFICATE_ARN}
            MinimumProtocolVersion: TLSv1.2_2019
            SslSupportMethod: sni-only
    PublicStaticDns:
      Type: "AWS::Route53::RecordSetGroup"
      Properties:
        HostedZoneId: ${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN_HOSTED_ZONE_ID}
        RecordSets:
          - Name: ${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN}.
            Type: 'A'
            AliasTarget:
              DNSName:
                Fn::GetAtt:
                  - PublicStaticCloudfront
                  - DomainName
              HostedZoneId: Z2FDTNDATAQYW2 # AWS hardcode
          - Name: ${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN}.
            Type: 'AAAA'
            AliasTarget:
              DNSName:
                Fn::GetAtt:
                  - PublicStaticCloudfront
                  - DomainName
              HostedZoneId: Z2FDTNDATAQYW2 # AWS hardcode

custom:
  wsgi:
    app: endpoint.app
    pythonBin: python
  pythonRequirements:
    dockerizePip: false
  customDomain:
    domainName: ${file(../stages/${opt:stage}/conf.json):COMPUTE_DOMAIN}
    basePath: ''
    stage: ${opt:stage}
    createRoute53Record: true
  s3Sync:
    - bucketName: ${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN}
      localDir: public

plugins:
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-s3-sync
